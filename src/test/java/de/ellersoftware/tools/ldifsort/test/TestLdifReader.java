package de.ellersoftware.tools.ldifsort.test;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;

import java.io.BufferedReader;
import java.io.File;
import java.io.StringReader;
import java.util.List;
import java.util.Locale;

import org.assertj.core.util.Files;
import org.junit.Test;

import de.ellersoftware.tools.ldifsort.LdifAttrValue;
import de.ellersoftware.tools.ldifsort.LdifEntry;
import de.ellersoftware.tools.ldifsort.LdifReader;

public class TestLdifReader {

	@Test
	public void testReader() {
		// already ordered
		String source1 = "# Generated by Apache Directory Studio on 14. November 2016 13:58:28\n"
		               + "\n"
				       + "# SCHEMA \"LBS-SCHEMA\"\n"
		               + "dn: cn=LBS-Schema, ou=schema\n"
		               + "objectclass: metaSchema\n"
		               + "objectclass: top\n"
		               + "cn: LBS-Schema\n"
		               + "m-dependencies: core\n"
		               + "m-dependencies: cosine\n"
		               + "m-dependencies: inetorgperson\n"
		               + "\n"
		               + "dn: ou=attributetypes, cn=LBS-Schema, ou=schema\n"
		               + "objectclass: organizationalUnit\n"
		               + "objectclass: top\n"
		               + "ou: attributetypes\n"
		               + "\n"
		               + "dn: m-oid=2.16.840.1.113719.1.8.4.14, ou=attributetypes, cn=LBS-Schema, ou=schem\n"
		               + " a\n"
		               + "objectclass: metaAttributeType\n"
		               + "objectclass: metaTop\n"
		               + "objectclass: top\n"
		               + "m-oid: 2.16.840.1.113719.1.8.4.14\n"
		               + "m-name: costCenter\n"
		               + "m-description: LBS Kostenstelle\n"
		               + "m-syntax: 1.3.6.1.4.1.1466.115.121.1.15";
		LdifReader reader = new LdifReader(new BufferedReader(new StringReader(source1)));
		reader.parse();
		reader.sortOnAttribute("dn", true, true, false, Locale.getDefault());

		assertThat(reader.getEntries().size()).isEqualTo(3);
		assertThat(reader.getEntries().get(0).getDn().getValue()).isEqualTo("cn=LBS-Schema, ou=schema");
		assertThat(reader.getEntries().get(1).getDn().getValue()).isEqualTo("ou=attributetypes, cn=LBS-Schema, ou=schema");
		assertThat(reader.getEntries().get(2).getDn().getValue()).isEqualTo("m-oid=2.16.840.1.113719.1.8.4.14, ou=attributetypes, cn=LBS-Schema, ou=schema");

		// now in inverse order
		String source2 = "# Generated by Apache Directory Studio on 14. November 2016 13:58:28\n"
		               + "\n"
		               + "# SCHEMA \"LBS-SCHEMA\"\n"
		               + "dn: m-oid=2.16.840.1.113719.1.8.4.14, ou=attributetypes, cn=LBS-Schema, ou=schem\n"
		               + " a\n"
		               + "objectclass: metaAttributeType\n"
		               + "objectclass: metaTop\n"
		               + "objectclass: top\n"
		               + "m-oid: 2.16.840.1.113719.1.8.4.14\n"
		               + "m-name: costCenter\n"
		               + "m-description: LBS Kostenstelle\n"
		               + "m-syntax: 1.3.6.1.4.1.1466.115.121.1.15\n"
		               + "\n"
		               + "dn: ou=attributetypes, cn=LBS-Schema, ou=schema\n"
		               + "objectclass: organizationalUnit\n"
		               + "objectclass: top\n"
		               + "ou: attributetypes\n"
		               + "\n"
		               + "dn: cn=LBS-Schema, ou=schema\n"
		               + "objectclass: metaSchema\n"
		               + "objectclass: top\n"
		               + "cn: LBS-Schema\n"
		               + "m-dependencies: core\n"
		               + "m-dependencies: cosine\n"
		               + "m-dependencies: inetorgperson";
		reader = new LdifReader(new BufferedReader(new StringReader(source2)));
		reader.parse();
		reader.sortOnAttribute("dn", true, true, false, Locale.getDefault());

		assertThat(reader.getEntries().get(0).getDn().getValue()).isEqualTo("cn=LBS-Schema, ou=schema");
		assertThat(reader.getEntries().get(1).getDn().getValue()).isEqualTo("ou=attributetypes, cn=LBS-Schema, ou=schema");
		assertThat(reader.getEntries().get(2).getDn().getValue()).isEqualTo("m-oid=2.16.840.1.113719.1.8.4.14, ou=attributetypes, cn=LBS-Schema, ou=schema");

		// now in inverse order
		String source3 = "# Generated by Apache Directory Studio on 14. November 2016 13:58:28\n"
		               + "\n"
		               + "# SCHEMA \"LBS-SCHEMA\"\n"
		               + "dn: m-oid=2.16.840.1.113719.1.8.4.14, ou=attributetypes, cn=LBS-Schema, ou=schem\n"
		               + " a\n"
		               + "objectclass: metaAttributeType\n"
		               + "objectclass: metaTop\n"
		               + "objectclass: top\n"
		               + "m-oid: 2.16.840.1.113719.1.8.4.14\n"
		               + "m-name: costCenter\n"
		               + "m-description: LBS Kostenstelle\n"
		               + "m-syntax: 1.3.6.1.4.1.1466.115.121.1.15\n"
		               + "\n"
		               + "dn: OU=ATTRIBUTETYPES, CN=LBS-SCHEMA, OU=SCHEMA\n"
		               + "objectclass: organizationalUnit\n"
		               + "objectclass: top\n"
		               + "ou: attributetypes\n"
		               + "\n"
		               + "dn: cn=LBS-Schema, ou=schema\n"
		               + "objectclass: metaSchema\n"
		               + "objectclass: top\n"
		               + "cn: LBS-Schema\n"
		               + "m-dependencies: core\n"
		               + "m-dependencies: cosine\n"
		               + "m-dependencies: inetorgperson";
		reader = new LdifReader(new BufferedReader(new StringReader(source3)));
		reader.parse();
		reader.sortOnAttribute("dn", true, true, false, Locale.getDefault());

		assertThat(reader.getEntries().get(0).getDn().getValue()).isEqualTo("cn=LBS-Schema, ou=schema");
		assertThat(reader.getEntries().get(1).getDn().getValue()).isEqualTo("OU=ATTRIBUTETYPES, CN=LBS-SCHEMA, OU=SCHEMA");
		assertThat(reader.getEntries().get(2).getDn().getValue()).isEqualTo("m-oid=2.16.840.1.113719.1.8.4.14, ou=attributetypes, cn=LBS-Schema, ou=schema");

	}


	@Test
	public void testReaderOnResourceFile() {
		LdifReader reader = new LdifReader(TestLdifReader.class.getResourceAsStream("/LBS-Schema.ldif"));
		reader.parse();
		assertThat(reader.getEntries().size()).isEqualTo(33);

		reader = new LdifReader(TestLdifReader.class.getResourceAsStream("/testusers.ldif"));
		reader.parse();
		assertThat(reader.getEntries().size()).isEqualTo(1223);
	}


	@Test
	public void testReaderOnFile() {
		LdifReader reader = new LdifReader(Files.currentFolder() + "/src/test/resources/LBS-Schema.ldif");
		reader.parse();
		assertThat(reader.getEntries().size()).isEqualTo(33);

		reader = new LdifReader(Files.currentFolder() + "/src/test/resources/testusers.ldif");
		reader.parse();
		assertThat(reader.getEntries().size()).isEqualTo(1223);

		try {
			reader = new LdifReader(Files.currentFolder() + "/src/test/resources/testusers.xyz");
			failBecauseExceptionWasNotThrown(IllegalArgumentException.class);
		} catch (IllegalArgumentException iae) {
			assertThat(iae).hasMessage("can't find file [" + Files.currentFolder() + File.separatorChar + "src" + File.separatorChar + "test" + File.separatorChar + "resources" + File.separatorChar + "testusers.xyz]");
		}
	}

}
